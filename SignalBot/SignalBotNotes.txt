Motivation:
There are a plethora of crytpo communities on discord that give out daily trading signals for their members. The goal of this bot is to use those trading signals to automate trades

Goals:
1.) automate trades with discord signals and start making profits
2.) scale the project up to have a database - the idea here is to share the database with people

Architecture:
---goal 1---:
- uses a microservices architecture 
- server.py is the host, discordscraper.py and main.py are the clients
- discordscraper connects the discord bot (via a token) to the crypto channel. Here it listens to messages and sends POST requests to the server.
- server saves messages in a list
- main makes GET requests, then uses the process message function to filter noise and trading signal
- main uses the signals to automate trading

        ---goal 2---:
        - uses microservices architecture and a database
        - discord scraper sends messages to fast api, fast api processes the messages then sends trading signals to the database
        - The database is its own server that is hosted on the internet
        - main program connects to the databases, retrieves trading signals and starts trading!
        - Therefore anyone who wants to trade does not need the discord bot or the fast api files
        - all they need is connection to the database and they can start making money!
        - however anyone can utilize discordscraper, use their own token, and contribute to the database




TODO:

- Need to define what a trading signal is: 
    - trading signal should be a dictionatry e.g. {ticker:"btc", pos:"long", ...}
    
- finish the process message function:
    - the function takes a string as input (messages) and outputs a dictionary or none (trading signal or noise)
    - create an algorithm to classify whether incoming messages are trading signals or noise

- finish the coinbase_buy and coinbase_sell functions 
    - logic mainly there need to finalize the actual functions
    - probably easier once we finish process message function
    - verify we can place orders inside of the state machine

- need robust saftey protocols
    - confirmation orders filled for buy and coinbase_sell
    - server disconnections may break code 

- figure out git stuff

** lets implement this later we can use our current approach for the time being **

- Need to get a database:
    - use postgreSQL find out how to get it
    - find out how to host a database online and locally for testing
    - find out how to send data to a data base 
    - find out how to hold and manage data in a database
    - find out how to extract data from a database
    - get data from discord -> fast api -> process message -> database -> main


